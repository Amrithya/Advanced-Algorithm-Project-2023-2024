# -*- coding: utf-8 -*-
"""Non-Constraint Dynamic Programming.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IfrGP3mrvZiV_EmAqeSHcZUYC9o50Geu
"""

def indices(a, start, end, n):
    currSum = 0
    maxSum = -9999999
    end[0] = -1
    currStart = 0
    for i in range(n):
        currSum += a[i]
        if currSum < 0:
            currSum = 0
            currStart = i + 1
        elif maxSum < currSum:
            maxSum = currSum
            start[0] = currStart
            end[0] = i
    if end[0] != -1:
        return maxSum
    maxSum = max(a)
    for i in range(n):
        if maxSum == a[i]:
            start = i
            end = i
    return maxSum


def maxMatrixSum(matrix):
    maxSum = -9999999
    start_i, start_j, end_i, end_j = None, None, None, None
    ROW = len(matrix)
    COL = len(matrix[0])
    stored = [0] * ROW
    sum = 0
    start = [0]
    end = [0]
    for left in range(COL):
        stored = [0] * ROW
        for right in range(left, COL):
            for i in range(ROW):
                stored[i] += matrix[i][right]
            sum = indices(stored, start, end, ROW)
            if sum > maxSum:
                maxSum = sum
                start_i = left
                end_i = right
                start_j = start[0]
                end_j = end[0]
    print("The Top Left of the Rectangle is: ", start_i, start_j)
    print("The Bottom Right of the Rectangle is: ", end_i, end_j)
    print("The maximum sum is: ", maxSum)

matrix = [[1, 2, -1, -4, -20],[-8, -3, 4, 2, 1],[3, 8, 10, 1, 3],[-4, -1, 1, 7, -6]]
maxMatrixSum(matrix)