# -*- coding: utf-8 -*-
"""dynamic_programming.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IfrGP3mrvZiV_EmAqeSHcZUYC9o50Geu
"""

def maxMatrixSum_non_constraint(matrix):
    rows = len(matrix)
    cols = len(matrix[0])

    # Calculate cumulative sums
    cumulative_sums = [[0] * (cols + 1) for _ in range(rows + 1)]
    for i in range(1, rows + 1):
        for j in range(1, cols + 1):
            cumulative_sums[i][j] = (
                matrix[i - 1][j - 1]
                + cumulative_sums[i - 1][j]
                + cumulative_sums[i][j - 1]
                - cumulative_sums[i - 1][j - 1]
            )

    max_sum = float('-inf')
    top, left, bottom, right = 0, 0, 0, 0

    # Calculate submatrix sums using cumulative sums
    for i1 in range(1, rows + 1):
        for j1 in range(1, cols + 1):
            for i2 in range(i1, rows + 1):
                for j2 in range(j1, cols + 1):
                    submatrix_sum = (
                        cumulative_sums[i2][j2]
                        - cumulative_sums[i1 - 1][j2]
                        - cumulative_sums[i2][j1 - 1]
                        + cumulative_sums[i1 - 1][j1 - 1]
                    )

                    if submatrix_sum > max_sum:
                        max_sum = submatrix_sum
                        top = i1 - 1
                        left = j1 - 1
                        bottom = i2 - 1
                        right = j2 - 1
                        top_left = (top, left)
                        bottom_right = (bottom, right)
    return max_sum,top_left,bottom_right


def maxMatrixSum_constraint(matrix, K, L):
    rows = len(matrix)
    cols = len(matrix[0])

    # Calculate cumulative sums
    cumulative_sums = [[0] * (cols + 1) for _ in range(rows + 1)]
    for i in range(1, rows + 1):
        for j in range(1, cols + 1):
            cumulative_sums[i][j] = (
                matrix[i - 1][j - 1]
                + cumulative_sums[i - 1][j]
                + cumulative_sums[i][j - 1]
                - cumulative_sums[i - 1][j - 1]
            )

    max_sum = float('-inf')
    top, left, bottom, right = 0, 0, 0, 0

    # Calculate submatrix sums using cumulative sums
    for i in range(K, rows + 1):
        for j in range(L, cols + 1):
            submatrix_sum = (
                cumulative_sums[i][j]
                - cumulative_sums[i - K][j]
                - cumulative_sums[i][j - L]
                + cumulative_sums[i - K][j - L]
            )

            if submatrix_sum > max_sum:
                max_sum = submatrix_sum
                top_left = (top, left)
                bottom_right = (bottom, right)
    return max_sum,top_left,bottom_right